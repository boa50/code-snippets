// Snnippets created using https://snippet-generator.app/
{
	"Dashboard template": {
		"scope": "html",
		"prefix": "dash",
		"body": [
			"<!DOCTYPE html>",
			"",
			"<head>",
			"    <meta charset=\"utf-8\">",
			"    <title>PAGE TITLE</title>",
			"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"    <!-- <link rel=\"stylesheet\" href=\"./style.css\"> -->",
			"    <script src=\"../lib/tailwind_3_4_3.min.js\"></script>",
			"</head>",
			"",
			"<body class=\"bg-gray-100 font-sans\">",
			"    <!-- HEADER -->",
			"    <div id=\"header\" class=\"flex flex-row p-4 mb-4 bg-slate-50\">",
			"        <div class=\"flex flex-row self-center items-center\">",
			"            <!-- PAGE LOGO -->",
			"            <!-- <img src=\"./img/logo.svg\" alt=\"dashboard logo\" class=\"max-h-10 mx-4\" /> -->",
			"            <h1 id=\"title\" class=\"text-3xl text-gray-600 self-center font-medium\">PAGE TITLE</h1>",
			"        </div>",
			"",
			"        <div class=\"flex-auto\"></div>",
			"",
			"        <!-- RIGHT SIDE HEADER -->",
			"        <div id=\"controls\" class=\"flex flex-row space-x-8 mr-8\">",
			"        </div>",
			"    </div>",
			"",
			"    <!-- CONTENT -->",
			"    <div class=\"mx-8\">",
			"        <div id=\"charts\" class=\"grid grid-cols-2 col-span-2 gap-4\">",
			"            <div class=\"bg-white/75 px-4 py-2 rounded-sm\">",
			"                <div id=\"chart1-container\">",
			"                    <h3 class=\"text-base text-gray-700 font-medium\">CHART TITLE</h3>",
			"                    <svg id=\"chart1\"></svg>",
			"                </div>",
			"            </div>",
			"        </div>",
			"",
			"        <!-- CAPTION -->",
			"        <div id=\"caption\" class=\"leading-none flex justify-end m-2\">",
			"            <span class=\"text-sm text-gray-400\">Source:</span>",
			"        </div>",
			"    </div>",
			"",
			"    <script src=\"../lib/d3_7_9_0.min.js\"></script>",
			"    <script type=\"module\" src=\"./script.js\"></script>",
			"</body>"
		],
		"description": "Dashboard template sth more"
	},
	"Scrollable template": {
		"scope": "html",
		"prefix": "scroll",
		"body": [
			"<!DOCTYPE html>",
			"",
			"<head>",
			"    <meta charset=\"utf-8\">",
			"    <title>PAGE TITLE</title>",
			"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
			"    <!-- <link rel=\"stylesheet\" href=\"./style.css\"> -->",
			"    <script src=\"../lib/tailwind_3_4_3.min.js\"></script>",
			"</head>",
			"",
			"<body class=\"bg-gray-100 font-sans\">",
			"    <!-- HEADER -->",
			"    <div id=\"header\" class=\"flex flex-row p-4 mb-4 bg-slate-50 sticky top-0\">",
			"        <div class=\"flex flex-row self-center items-center\">",
			"            <!-- PAGE LOGO -->",
			"            <!-- <img src=\"./img/logo.svg\" alt=\"dashboard logo\" class=\"max-h-10 mx-4\" /> -->",
			"            <h1 id=\"title\" class=\"text-3xl text-gray-600 self-center font-medium\">PAGE TITLE</h1>",
			"        </div>",
			"",
			"        <div class=\"flex-auto\"></div>",
			"",
			"        <!-- RIGHT SIDE HEADER -->",
			"        <div id=\"controls\" class=\"flex flex-row space-x-8 mr-8\">",
			"        </div>",
			"    </div>",
			"",
			"    <!-- CONTENT -->",
			"    <div class=\"mx-8\">",
			"        <div id=\"charts\" class=\"container mx-auto px-32 grid grid-cols-1 gap-y-4 mb-4\">",
			"            <div class=\"bg-white/75 px-4 py-2 rounded-sm\">",
			"                <div id=\"chart1-container\">",
			"                    <h3 class=\"text-base text-gray-700 font-medium\">CHART TITLE</h3>",
			"                    <svg id=\"chart1\"></svg>",
			"                </div>",
			"                <div id=\"chart1-caption\" class=\"leading-none flex justify-end mx-2\">",
			"                    <span class=\"text-sm text-gray-400\">REFERENCE</span>",
			"                </div>",
			"            </div>",
			"            <div class=\"bg-white/75 px-4 py-2 rounded-sm\">",
			"                <div id=\"chart2-container\">",
			"                    <h3 class=\"text-base text-gray-700 font-medium\">CHART TITLE</h3>",
			"                    <svg id=\"chart2\"></svg>",
			"                </div>",
			"                <div id=\"chart2-caption\" class=\"leading-none flex justify-end mx-2\">",
			"                    <span class=\"text-sm text-gray-400\">REFERENCE</span>",
			"                </div>",
			"            </div>",
			"            <div class=\"bg-white/75 px-4 py-2 rounded-sm\">",
			"                <div id=\"chart3-container\">",
			"                    <h3 class=\"text-base text-gray-700 font-medium\">CHART TITLE</h3>",
			"                    <svg id=\"chart3\"></svg>",
			"                </div>",
			"                <div id=\"chart3-caption\" class=\"leading-none flex justify-end mx-2\">",
			"                    <span class=\"text-sm text-gray-400\">REFERENCE</span>",
			"                </div>",
			"            </div>",
			"        </div>",
			"    </div>",
			"",
			"    <script src=\"../lib/d3_7_9_0.min.js\"></script>",
			"    <script type=\"module\" src=\"./script.js\"></script>",
			"</body>"
		],
		"description": "Scrollable template"
	},
	"Horizontal bars": {
		"scope": "javascript",
		"prefix": "barh",
		"body": [
			"const x = d3",
			"    .scaleLinear()",
			"    .domain([0, MAX_VALUE])",
			"    .range([0, width])",
			"",
			"const y = d3",
			"    .scaleBand()",
			"    .domain(data.map(d => d.GROUP_FIELD))",
			"    .range([0, height])",
			"    .padding(.1)",
			"",
			"chart",
			"    .selectAll('.myRect')",
			"    .data(data)",
			"    .join('rect')",
			"    .attr('x', x(0))",
			"    .attr('y', d => y(d.GROUP_FIELD))",
			"    .attr('width', d => x(d.VALUE))",
			"    .attr('height', y.bandwidth())",
			"    .attr('fill', '#69b3a2')"
		],
		"description": "Horizontal bars"
	},
	"Horizontal bars grouped": {
		"scope": "javascript",
		"prefix": "barhgrp",
		"body": [
			"const getSubgroupValues = d => SUBGROUPS.map(subgroup => { return { subgroup: subgroup, value: d[subgroup] } })",
			"",
			"const x = d3",
			"    .scaleLinear()",
			"    .domain([0, MAX_VALUE])",
			"    .range([0, width])",
			"",
			"const y = d3",
			"    .scaleBand()",
			"    .domain(GROUPS)",
			"    .range([0, height])",
			"    .padding(.1)",
			"",
			"const ySubgroup = d3",
			"    .scaleBand()",
			"    .domain(SUBGROUPS)",
			"    .range([0, y.bandwidth()])",
			"    .padding(.05)",
			"",
			"chart",
			"    .selectAll('g')",
			"    .data(data)",
			"    .join('g')",
			"    .attr('transform', d => `translate(0, ${y(d.GROUP_FIELD)})`)",
			"    .selectAll('rect')",
			"    .data(getSubgroupValues)",
			"    .join('rect')",
			"    .attr('x', x(0))",
			"    .attr('y', d => ySubgroup(d.subgroup))",
			"    .attr('width', d => x(d.value))",
			"    .attr('height', ySubgroup.bandwidth())",
			"    .attr('fill', '#69b3a2')"
		],
		"description": "Horizontal bars grouped"
	},
	"Circular bars stacked": {
		"scope": "javascript",
		"prefix": "barcirclestack",
		"body": [
			"const keys = ['KEY1', 'KEY2', 'KEYN']",
			"",
			"const innerRadius = 100",
			"const outerRadius = Math.min(width, height) / 2",
			"const padAngle = 0.05",
			"",
			"const centeredChart = chart",
			"    .append('g')",
			"    .attr('transform', `translate(${[width / 2, height / 2]})`)",
			"",
			"const x = d3",
			"    .scaleBand()",
			"    .range([0, 2 * Math.PI])",
			"    .domain(data.map(d => d.X_VARIABLE))",
			"",
			"const y = d3",
			"    .scaleRadial()",
			"    .range([innerRadius, outerRadius])",
			"    .domain([0, d3.max(data, d => d.TOTAL_VALUE)])",
			"",
			"const stackedData = d3",
			"    .stack()",
			"    .keys(keys)",
			"    (data)",
			"",
			"const colour = d3",
			"    .scaleOrdinal()",
			"    .range(d3.schemeTableau10)",
			"    .domain(keys)",
			"",
			"const arc = d3",
			"    .arc()",
			"    .innerRadius(d => y(d[0]))",
			"    .outerRadius(d => y(d[1]))",
			"    .startAngle(d => x(d.data.X_VARIABLE))",
			"    .endAngle(d => x(d.data.X_VARIABLE) + x.bandwidth())",
			"    .padAngle(padAngle)",
			"    .padRadius(innerRadius)",
			"",
			"centeredChart",
			"    .selectAll('g')",
			"    .data(stackedData)",
			"    .join('g')",
			"    .attr('fill', d => colour(d.key))",
			"    .selectAll('path')",
			"    .data(d => d)",
			"    .join('path')",
			"    .attr('d', arc)",
			"",
			"centeredChart",
			"    .append('g')",
			"    .selectAll('g')",
			"    .data(data)",
			"    .join('g')",
			"    .attr('text-anchor', 'middle')",
			"    .style('font-size', '0.6rem')",
			"    .attr('transform', d => `rotate(${((x(d.X_VARIABLE) + x.bandwidth() / 2) * 180 / Math.PI - 90)}) translate(${innerRadius}, 0)`)",
			"    .call(g => g",
			"        .append('text')",
			"        .attr('fill', LABELS_COLOUR)",
			"        .attr('transform',",
			"            d => (x(d.X_VARIABLE) + x.bandwidth() / 2 + Math.PI / 2) % (2 * Math.PI) < Math.PI ?",
			"                'rotate(90)translate(0,11)' :",
			"                'rotate(-90)translate(0,-4)'",
			"        )",
			"        .text(d => d.X_VARIABLE)",
			"    )"
		],
		"description": "Circular bars stacked"
	},
	"Single line": {
		"scope": "javascript",
		"prefix": "line",
		"body": [
			"const line = d3",
			"    .line()",
			"    .x(d => xScale(d.X_VALUE))",
			"    .y(d => yScale(d.Y_VALUE))",
			"",
			"chart",
			"    .selectAll('.line-path')",
			"    .data([data])",
			"    .join('path')",
			"    .attr('class', 'line-path')",
			"    .attr('fill', 'none')",
			"    .attr('stroke', '#000000')",
			"    .attr('stroke-width', 1)",
			"    .attr('d', d => line(d))"
		],
		"description": "Single line"
	},
	"Multiple lines": {
		"scope": "javascript",
		"prefix": "linemult",
		"body": [
			"const dataPerGroup = d3.group(data, d => d.group)",
			"const colour = d3",
			"    .scaleOrdinal()",
			"    .range(['#000000', '#FF0000'])",
			"",
			"const line = d3",
			"    .line()",
			"    .x(d => xScale(d.X_VALUE))",
			"    .y(d => yScale(d.Y_VALUE))",
			"",
			"chart",
			"    .selectAll('.drewLine')",
			"    .data(dataPerGroup)",
			"    .join('path')",
			"    .attr('fill', 'none')",
			"    .attr('stroke', d => colour(d[0]))",
			"    .attr('stroke-width', 1)",
			"    .attr('d', d => line(d[1]))"
		],
		"description": "Multiple lines"
	},
	"Double lollipop": {
		"scope": "javascript",
		"prefix": "lollidbl",
		"body": [
			"chart",
			"    .selectAll('.lollipop-group')",
			"    .data(data)",
			"    .join('g')",
			"    .attr('class', 'lollipop-group')",
			"    .call(g => {",
			"        g",
			"            .append('line')",
			"            .attr('x1', d => x(Math.min(d.FIRST_VALUE, d.LAST_VALUE)))",
			"            .attr('x2', d => x(Math.max(d.FIRST_VALUE, d.LAST_VALUE)))",
			"            .attr('y1', d => y(d.GROUP) + y.bandwidth() / 2)",
			"            .attr('y2', d => y(d.GROUP) + y.bandwidth() / 2)",
			"            .attr('stroke', 'grey')",
			"            .attr('stroke-width', 1)",
			"",
			"        g",
			"            .append('circle')",
			"            .attr('cx', d => x(d.FIRST_VALUE))",
			"            .attr('cy', d => y(d.GROUP) + y.bandwidth() / 2)",
			"            .attr('r', 5)",
			"            .style('fill', '#69b3a2')",
			"",
			"        g",
			"            .append('circle')",
			"            .attr('cx', d => x(d.LAST_VALUE))",
			"            .attr('cy', d => y(d.GROUP) + y.bandwidth() / 2)",
			"            .attr('r', 5)",
			"            .style('fill', '#4C4082')",
			"    })"
		],
		"description": "Double lollipop"
	},
	"Ridgeline": {
		"scope": "javascript",
		"prefix": "ridgeline",
		"body": [
			"const y = d3",
			"    .scaleBand()",
			"    .domain(GROUPS)",
			"    .range([0, height])",
			"    .paddingInner(1)",
			"",
			"const dataPerGroup = d3.group(data, d => d.GROUP)",
			"",
			"const area = data => {",
			"    const y = d3",
			"        .scaleLinear()",
			"        .domain(d3.extent(data, d => d.Y_VALUE))",
			"        .range([height, height * CUSTOM_MULTIPLIER])",
			"",
			"    return d3",
			"        .area()",
			"        .curve(d3.curveBasis)",
			"        .x(d => x(d.X_VALUE))",
			"        .y0(height)",
			"        .y1(d => y(d.Y_VALUE))",
			"        (data)",
			"}",
			"",
			"chart",
			"    .selectAll('.ridge-lane')",
			"    .data(dataPerGroup)",
			"    .join('path')",
			"    .attr('class', 'ridge-lane')",
			"    .attr('transform', d => `translate(0, ${(y(d[0]) - height)})`)",
			"    .datum(d => d[1])",
			"    .attr('fill', FILL_COLOUR)",
			"    .attr('stroke', STROKE_COLOUR)",
			"    .attr('stroke-width', 1)",
			"    .attr('d', area)"
		],
		"description": "Ridgeline"
	},
	"Scatterplot": {
		"scope": "javascript",
		"prefix": "scatter",
		"body": [
			"const colour = d3",
			"    .scaleOrdinal()",
			"    .domain([GROUP1, GROUP2])",
			"    .range([COLOUR1, COLOUR2])",
			"",
			"chart",
			"    .selectAll('.data-points')",
			"    .data(data)",
			"    .join('circle')",
			"    .attr('class', 'data-points')",
			"    .attr('r', 3)",
			"    .attr('fill', d => colour(d.COLOUR_GROUP))",
			"    .style('opacity', 0.75)",
			"    .attr('stroke', '#6b7280')",
			"    .attr('stroke-width', 0.5)",
			"    .transition()",
			"    .attr('cx', d => x(d.X_VALUE))",
			"    .attr('cy', d => y(d.Y_VALUE))"
		],
		"description": "Scatterplot"
	},
	"Stacked area": {
		"scope": "javascript",
		"prefix": "areastacked",
		"body": [
			"const keys = ['GROUPS TO BE STACKED']",
			"",
			"const colour = d3",
			"    .scaleOrdinal()",
			"    .domain(keys)",
			"    .range(['GROUPS COLOURS'])",
			"",
			"const stackedData = d3",
			"    .stack()",
			"    .keys(keys)",
			"    (data)",
			"",
			"const area = d3",
			"    .area()",
			"    .x(d => x(d.data.X_AXIS_FIELD))",
			"    .y0(d => y(d[0]))",
			"    .y1(d => y(d[1]))",
			"",
			"chart",
			"    .selectAll('.stacks')",
			"    .data(stackedData)",
			"    .join('path')",
			"    .attr('fill', d => colour(d.key))",
			"    .attr('d', area)"
		],
		"description": "Stacked area"
	},
	"Tooltip text": {
		"scope": "javascript",
		"prefix": "tooltiptxt",
		"body": [
			"`",
			"<strong>\\${TITLE}</strong>",
			"<div style=\"display: flex; justify-content: space-between\">",
			"    <span>FIELD_NAME:&emsp;</span>",
			"    <span>\\${FIELD_VALUE}</span>",
			"</div>",
			"`"
		],
		"description": "Tooltip text"
	},
	"Add chart skeleton": {
		"scope": "javascript",
		"prefix": "chartadd",
		"body": [
			"export const addChart = (chartProps, data) => {",
			"    const { chart, width, height } = chartProps",
			"",
			"    const x = d3",
			"        .scaleLinear()",
			"        .domain(d3.extent(data, d => d.X_VARIABLE).map((d, i) => d * [0.95, 1.05][i]))",
			"        .range([0, width])",
			"",
			"    const y = d3",
			"        .scaleLinear()",
			"        .domain(d3.extent(data, d => d.Y_VARIABLE).map((d, i) => d * [0.95, 1.05][i]))",
			"        .range([height, 0])",
			"}"
		],
		"description": "Add chart skeleton"
	},
	"Hexbin chart": {
		"scope": "javascript",
		"prefix": "hexbin",
		"body": [
			"const dataHexbin = data.map(d => [x(d.X_VARIABLE), y(d.Y_VARIABLE)])",
			"",
			"const hexbin = d3",
			"    .hexbin()",
			"    .radius(15)",
			"    .extent([[0, 0], [width, height]])",
			"",
			"const colour = d3",
			"    .scaleLinear()",
			"    .domain(d3.extent(hexbin(dataHexbin), d => d.length))",
			"    .range(['transparent', '#69b3a2'])",
			"",
			"chart",
			"    .append('clipPath')",
			"    .attr('id', 'hexbin-clip')",
			"    .append('rect')",
			"    .attr('width', width)",
			"    .attr('height', height)",
			"",
			"chart",
			"    .append('g')",
			"    .attr('clip-path', 'url(#hexbin-clip)')",
			"    .selectAll('path')",
			"    .data(hexbin(dataHexbin))",
			"    .join('path')",
			"    .attr('class', 'hexbin-point')",
			"    .attr('d', hexbin.hexagon())",
			"    .attr('transform', d => `translate(${d.x}, ${d.y})`)",
			"    .attr('fill', d => colour(d.length))",
			"    .attr('stroke', 'black')",
			"    .attr('stroke-width', '0.1')"
		],
		"description": "Hexbin chart"
	},
	"Heatmap chart": {
		"scope": "javascript",
		"prefix": "heatmap",
		"body": [
			"const x = d3",
			"    .scaleBand()",
			"    .domain(X_VARIABLE_GROUPS)",
			"    .range([0, width])",
			"    .padding(0.05)",
			"",
			"const y = d3",
			"    .scaleBand()",
			"    .domain(Y_VARIABLE_GROUPS)",
			"    .range([height, 0])",
			"    .padding(0.05)",
			"",
			"const colour = d3",
			"    .scaleLinear()",
			"    .range(['transparent', d3.hsl(COLOUR_MAX).darker(0.5)])",
			"    .domain([0, Math.trunc(d3.max(data, d => d.VALUE) / 1e3) * 1e3])",
			"",
			"chart",
			"    .selectAll('.data-point')",
			"    .data(data)",
			"    .join('rect')",
			"    .attr('class', 'data-point')",
			"    .attr('x', d => x(d.X_VARIABLE))",
			"    .attr('y', d => y(d.Y_VARIABLE))",
			"    .attr('width', x.bandwidth())",
			"    .attr('height', y.bandwidth())",
			"    .attr('rx', 4)",
			"    .attr('ry', 4)",
			"    .style('fill', d => colour(d.VALUE))",
			"",
			"// Tooltip",
			"chart",
			"    .selectAll('.tooltip-point')",
			"    .data(dataGrouped)",
			"    .join('rect')",
			"    .attr('class', 'tooltip-point')",
			"    .attr('x', d => x(d.X_VARIABLE))",
			"    .attr('y', d => y(d.Y_VARIABLE))",
			"    .attr('width', x.bandwidth())",
			"    .attr('height', y.bandwidth())",
			"    .attr('rx', 4)",
			"    .attr('ry', 4)",
			"    .attr('stroke-width', 4)",
			"    .attr('stroke', COLOUR_TOOLTIP)",
			"    .attr('opacity', 0)",
			"    .style('fill', 'transparent')"
		],
		"description": "Heatmap chart"
	},
	"Group data by many keys": {
		"scope": "javascript",
		"prefix": "datagrp",
		"body": [
			"const dataGrouped = d3",
			"    .flatGroup(data, d => d.KEY)",
			"    .map(d => {",
			"        return {",
			"            VALUE_KEY_1: d[1][0].VALUE_KEY_1,",
			"            VALUE_KEY_N: d[1][0].VALUE_KEY_N,",
			"            VALUE_TOTAL: d[1].reduce((total, d) => total + d.VALUE, 0)",
			"        }",
			"    })"
		],
		"description": "Group data by many keys"
	},
	"Pie chart": {
		"scope": "javascript",
		"prefix": "piechart",
		"body": [
			"chart.attr('transform', `translate(${[width / 2, height / 2]})`)",
			"",
			"const pieData = d3",
			"    .pie()",
			"    .value(d => d[1])",
			"    .sort((a, b) => (a, b))",
			"    (Object.entries({ FIELD1: 25, FIELD2: 75 }))",
			"",
			"const colour = d3",
			"    .scaleOrdinal()",
			"    .range(['#000', '#000'])",
			"",
			"const arc = d3.arc()",
			"    .innerRadius(0)",
			"    .outerRadius(50)",
			"",
			"chart",
			"    .selectAll('.my-slices')",
			"    .data(pieData)",
			"    .join('path')",
			"    .attr('d', arc)",
			"    .attr('fill', d => colour(d.data[0]))",
			"    .attr('stroke', 'white')",
			"    .style('stroke-width', '1px')",
			"    .style('opacity', 0.9)",
			"",
			"chart",
			"    .selectAll('.my-slices')",
			"    .data(pieData)",
			"    .join('text')",
			"    .attr('class', 'font-bold text-lg')",
			"    .attr('fill', 'white')",
			"    .attr('text-anchor', 'middle')",
			"    .attr('dominant-baseline', 'middle')",
			"    .attr('transform', d => `translate(${arc.centroid(d).map((d, i) => d * [1.4, 1.25][i])})`)",
			"    .text(d => `${d.data[1]}%`)"
		],
		"description": "Pie chart"
	},
	"Get file complete path": {
		"scope": "python",
		"prefix": "filefulllpath",
		"body": [
			"from os import path",
			"",
			"def get_path(file_name):",
			"    return path.join(path.dirname(path.realpath(__file__)), file_name)"
		],
		"description": "Get file complete path"
	},
	"Fill forward column values": {
		"scope": "python",
		"prefix": "ffillcols",
		"body": [
			"df[\"COLUMN NAME\"] = df.groupby(\"GROUP COLUMN NAME\")[\"COLUMN NAME\"].transform(",
			"    lambda x: x.replace(to_replace=None, method=\"ffill\")",
			")"
		],
		"description": "Fill forward column values"
	},
	"Export dataframe to csv": {
		"scope": "python",
		"prefix": "exportcsv",
		"body": [
			"df.to_csv(get_path(\"dataset.csv\"), index=False)"
		],
		"description": "Export dataframe to csv"
	}
}